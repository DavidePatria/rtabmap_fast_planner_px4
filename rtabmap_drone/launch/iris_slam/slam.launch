<?xml version="1.0"?>
<launch>

	<arg name="localization" default="false"/>
	<arg name="rtabmapviz"   default="true"/>
	<arg name="ground_truth" default="false"/>
	<arg name="map_path"     default="~/.ros/rtabmap.db"/>
	<arg name="offb"         default="true"/>
	<arg name="control"      default="true"/>


	<!-- the original package launches a lot of stuff with the slam, like move_base and others -->
	<!-- for since these are being externalised the default behaviour here is to not launch  -->
	<!-- anything else than the slam -->
	<arg name="slam_only" default="true"/>

	<!-- launch the script to repub the camera pose so fast-planner can use it -->
	<!-- TO DO: check that the topic names is the same -->
	<arg name="repub_camera_pose" default="true"/>

	<node if="$(arg repub_camera_pose)" pkg="rtabmap_drone" type="camera_pose_publisher.py" name="camera_pose_publisher"> </node> 

	<arg name="rgb_arg"	    default= "/r200/camera/color/image_raw" />
	<arg name="depth_arg"	    default= "/r200/camera/depth/image_raw" />
	<arg name="camera_info_arg" default= "/r200/camera/color/camera_info" />
	<arg name="imu_arg"	    default= "/body_imu/data" />
	
	<arg     if="$(arg localization)" name="pre_args" default=""/>
	<arg unless="$(arg localization)" name="pre_args" default="-d"/>
	
	<node pkg="imu_complementary_filter" type="complementary_filter_node" name="imu_filter_node" output="screen">
		<remap from="imu" to="body_imu"/>
	</node> 
	<node pkg="nodelet" type="nodelet" name="imu_to_tf" args="standalone rtabmap_ros/imu_to_tf">
		<remap from="imu/data" to="/body_imu/data"/>
		<param name="fixed_frame_id" value="base_link_stabilized"/>
		<param name="base_frame_id" value="base_link"/>
	</node>

	<!-- To connect rtabmap planning stuff with move_base below -->
	<param name="/rtabmap/rtabmap/use_action_for_goal" value="true"/>
	<remap from="/rtabmap/move_base" to="/move_base"/>

	<!-- VSLAM -->
	<param name="/rtabmap/rtabmap/latch" value="false"/> <!-- For some reason, if we latch grid_map, the global costmap inflation layer will create holes on robot path. To avoid holes, republish grid_map on each update (latching disabled). -->
	<include file="$(find rtabmap_ros)/launch/rtabmap.launch">
		<arg name="localization"        value ="$(arg localization)"/>
		<arg name="args"                value ="$(arg pre_args) --Optimizer/GravitySigma 0.1 --Vis/FeatureType 10 --Kp/DetectorStrategy 10 --Grid/MapFrameProjection true --NormalsSegmentation false --Grid/MaxGroundHeight 1 --Grid/MaxObstacleHeight 1.6 --RGBD/StartAtOrigin true" />
		<arg name="rtabmapviz"          value ="$(arg rtabmapviz)" />
		<arg name="frame_id"            value ="base_link" />
		<arg name="odom_guess_frame_id" value ="base_link_stabilized" />
		<!-- manually added argument in conjunction to the add of a .ini config file in the referenced folder -->
		<arg name="gui_cfg" value ="$(find rtabmap_drone)/config/rtabmap_gui.ini" />


		<arg name="rgbd_sync" value ="true"/>
		
		<!-- old definition of topics, hardcoded -->
		<!-- <arg name="rgb_topic"         value="/r200/camera/color/image_raw" /> -->
		<!-- <arg name="depth_topic"       value="/r200/camera/depth/image_raw" /> -->
		<!-- <arg name="camera_info_topic" value="/r200/camera/color/camera_info" /> -->
		<!-- <arg name="imu_topic"         value="/body_imu/data"/> -->

		<!-- define topics as arguments to allow for more flexible use of launch file -->
		<arg name="rgb_topic"         value="$(arg rgb_arg)" />
		<arg name="depth_topic"       value="$(arg depth_arg)" />
		<arg name="camera_info_topic" value="$(arg camera_info_arg)" />
		<arg name="imu_topic"         value="$(arg imu_arg)" />
	
		<arg name="wait_imu_to_init"  value="true"/>
	
		<arg name="approx_sync"       value="true"/>
	
		<arg if="$(arg ground_truth)" name="ground_truth_frame_id" value="world"/>
		<arg if="$(arg ground_truth)" name="ground_truth_base_frame_id" value="base_link_gt"/>
		<!-- add default and selectable map databse -->
		<arg name="database_path" value="$(arg map_path)" />
	</include>


	<!-- launch conversion node here in the package bundled in this very git repo so the first  -->
	<!-- wait_for_transorm doesn't fail -->
	<!-- repub is not crucial for the success of the startup operation. it makes more sense to keep the -->
	<!-- conversion in fast-planner as it makes it compliant with px4 standards -->
	<!-- <node pkg="pos_cmd_2_pos_targ" type="pos_conv.py" name="pos_conv" /> -->

	<!-- start offboard_node here and also republish so when offboard_node starts there is -->
	<!-- already a transform between map and bsse_link to be found -->
	<group if="$(arg offb)">
		<node pkg="offboard_safety" type="offboard_node" name="offboard_node">
		</node>

		<node pkg="offboard_safety" type="remote_pub.py" name="remote_pub_node">
		</node>
	</group>

	<!-- launch geometric controller -->
	<include if="$(arg control)" file="$(find rtabmap_drone)/launch/geometric_controller.launch"> </include>


	<!-- has mentioned at the top this belongs to the original repository and is disable by default -->
	<group unless="$(arg slam_only)">
		<!-- Costmap -->
		<node pkg="nodelet" type="nodelet" name="camera_points_xyz" args="standalone rtabmap_ros/point_cloud_xyz">
			<remap from="depth/image"       to="/r200/camera/depth/image_raw"/>
			<remap from="depth/camera_info" to="/r200/camera/depth/camera_info"/>
			<remap from="cloud"             to="camera_cloud" />

			<param name="decimation"  type="double" value="4"/>
			<param name="voxel_size"  type="double" value="0.0"/>
			<param name="approx_sync" type="bool"   value="true"/>
		</node> 

		<!-- navigation -->  
		<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
			<remap from="map" to="/rtabmap/grid_map"/>
		<remap from="odom" to="/rtabmap/odom"/>
		<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />  
		<rosparam file="$(find rtabmap_drone)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find rtabmap_drone)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find rtabmap_drone)/param/global_costmap_params.yaml" command="load" />
		<rosparam file="$(find rtabmap_drone)/param/local_costmap_params.yaml" command="load" />
		<rosparam file="$(find rtabmap_drone)/param/base_local_planner_params.yaml" command="load" />
		</node>
		<node name="empty_voxels_markers" pkg="rtabmap_ros" type="voxel_markers" args="voxel_grid:=/move_base/local_costmap/voxel_layer/voxel_grid visualization_marker:=/voxels_empty">
			<param name="cell_type" value="0"/>
		</node>
		<node name="marked_voxels_markers" pkg="rtabmap_ros" type="voxel_markers" args="voxel_grid:=/move_base/local_costmap/voxel_layer/voxel_grid visualization_marker:=/voxels_marked" />
		
		<!-- joystick -->
		<rosparam file="$(find rtabmap_drone)/config/joy_config.yaml" />
		<node pkg="joy" type="joy_node" name="joy_node">
			<param name="autorepeat_rate" value="5"/>
		</node>
		<node pkg="teleop_twist_joy" type="teleop_node" name="teleop_node" output="screen">
			<param name="autorepeat_rate" value="5"/>
		</node>
	</group>


	<!-- Ground truth -->
	<!-- still haven't figured out the usefulness of this which is false by default -->
	<node if="$(arg ground_truth)" pkg="tf" type="static_transform_publisher" name="worldtomap_broadcaster" args="0 0 0 0 0 0 1 world map 100" />
	<node if="$(arg ground_truth)" pkg="rtabmap_ros" type="gazebo_ground_truth.py" name="gazebo_ground_truth" output="screen">
		<param name="frame_id"        value="world"/>
		<param name="child_frame_id"  value="base_link_gt"/>
		<param name="gazebo_frame_id" value="drone::base_link"/>
	</node>
</launch>
