<launch>

	<!-- THIS ONE IS FOR DRY IRIS -->

	<!-- vehicle pose -->
	<arg name="est" default="ekf2"/>
	<!-- this name should guide px4 to source the rigt config file from the folder -->
	<!-- in this package pointed to below -->
	<arg name="vehicle" default="iris"/>
	<arg name="x" default="-2"/>
	<arg name="y" default="-0.5"/>
	<arg name="z" default="0"/>
	<arg name="R" default="0"/>
	<arg name="P" default="0"/>
	<arg name="Y" default="0"/>
	<arg name="yaw" default="0"/>

	<arg name="fcu_url" default="udp://:14540@localhost:14557"/>
	<arg name="respawn_mavros" default="false"/>

	<!-- <arg name="world" default="$(find px4_tests)/worlds/small_house.world"/> -->
	<arg name="sdf" default="$(find rtabmap_drone)/models/iris_depth_camera/iris_depth_camera.sdf"/>

	<arg name="interactive" default="true"/>


	<!-- added from px4/posix_sitl.launch -->
	<!-- <env name="PX4_SIM_MODEL" value="$(arg vehicle)" /> -->
	<!-- <env name="PX4_SIM_MODEL" value="iris" /> -->
	<env name="PX4_SIM_MODEL" value="$(arg vehicle)" />
	<env name="PX4_ESTIMATOR" value="$(arg est)" />

	<!-- PX4 SITL -->
	<arg unless="$(arg interactive)" name="px4_command_arg1" value="-d"/>
	<arg     if="$(arg interactive)" name="px4_command_arg1" value=""/>
	<arg name="rcS" default="$(find rtabmap_drone)/config/rcS"/>
	<!-- make px4 source the custom rc file or whatever it is -->
	<!-- <node name="sitl" pkg="px4" type="px4" output="screen" -->
	<!--     args="$(find px4)/build/px4_sitl_default/etc -s etc/init.d-posix/rcS $(arg px4_command_arg1)" required="true"/> -->
	<node name="sitl" pkg="px4" type="px4" output="screen"
		args="$(find px4)/build/px4_sitl_default/etc -s $(arg rcS) $(arg px4_command_arg1)" required="true"/>
	
	<!-- added from px4/posix_sitl.launch -->
	<!-- gazebo model -->
	<node name="$(anon vehicle_spawn)" pkg="gazebo_ros" type="spawn_model" output="screen" args="-sdf -file $(arg sdf) -model $(arg vehicle) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg yaw)"/>
	
	<!-- MAVROS -->
	<!-- <include file="$(find mavros)/launch/px4.launch"> -->
	<include file="$(find mavros)/launch/node.launch">
		<!-- get the config from this package, which includes no tf publishing (which -->
		<!-- is left to the slam) and other stuff -->
		<arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
		<arg name="config_yaml" value="$(find rtabmap_drone)/config/px4_config.yaml" />

	    <!-- GCS link is provided by SITL -->
		<!-- copied from the iris_rtabmap spawner, hopefully no problems -->
	    <arg name="fcu_url" value="$(arg fcu_url)"/>
	    <arg name="gcs_url" value=""/>
		<arg name="tgt_system" value="1" />
		<arg name="tgt_component" value="1" />
		<arg name="log_output" value="screen" />
		<arg name="fcu_protocol" value="v2.0" />
	    <arg name="respawn_mavros" value="$(arg respawn_mavros)"/>
	</include>

	<!-- launch publisher node for camera_link transform  -->
	<!-- <node pkg="tf2_ros" type="static_transform_publisher" name="odom_link_broadcaster" args="0 0 0 0 0 0 1 odom base_link" /> -->
	<!-- <node pkg="tf2_ros" type="static_transform_publisher" name="camera_link_broadcaster" args="0.1 0 0 0 0 0 1 base_link camera_link" /> -->
	<node pkg="tf2_ros" type="static_transform_publisher" name="camera_link_broadcaster" args="0.1 0 0 -0.5 0.5 -0.5 0.5 base_link camera_link" />
	<!-- <node pkg="tf2_ros" type="static_transform_publisher" name="camera_link_broadcaster" args="0.1 0 0 -0.5 0.5 -0.5 0.5 camera_link camera_link_rot 100" /> -->
	<!-- taken from px4-fast-planner. used to rotate point cloud and get it right oriented for the planner to work -->
	<!-- <node pkg="tf" type="static_transform_publisher" name="camera_link_broadcaster" args="0.1 0 0.0 -1.57 0 -1.57 base_link camera_link 33"/> -->

	<!-- transform for the frame used by the global planner -->
	<node pkg="tf2_ros" type="static_transform_publisher" name="local_origin_broadcaster" args="0 0 0 0 0 0 1 map local_origin" />

</launch>
